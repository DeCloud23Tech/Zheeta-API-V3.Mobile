// Mocks generated by Mockito 5.4.4 from annotations
// in zheeta/test/mock/app/api/api_manager.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:zheeta/app/api/api_manager.dart' as _i3;
import 'package:zheeta/app/api/formatted_response.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFormattedResponse_0 extends _i1.SmartFake
    implements _i2.FormattedResponse {
  _FakeFormattedResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiManager extends _i1.Mock implements _i3.ApiManager {
  MockApiManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FormattedResponse> getHttp(
    String? route, {
    Map<String, dynamic>? body,
    Map<String, dynamic>? params,
    bool? formdata = false,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHttp,
          [route],
          {
            #body: body,
            #params: params,
            #formdata: formdata,
            #token: token,
          },
        ),
        returnValue:
            _i4.Future<_i2.FormattedResponse>.value(_FakeFormattedResponse_0(
          this,
          Invocation.method(
            #getHttp,
            [route],
            {
              #body: body,
              #params: params,
              #formdata: formdata,
              #token: token,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormattedResponse>);

  @override
  _i4.Future<_i2.FormattedResponse> postHttp(
    String? route,
    dynamic body, {
    Map<String, dynamic>? params,
    bool? formdata = false,
    bool? formEncoded = false,
    String? token,
    void Function({
      int count,
      int total,
    })? onSendProgress,
    void Function({
      int count,
      int total,
    })? onRecieveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postHttp,
          [
            route,
            body,
          ],
          {
            #params: params,
            #formdata: formdata,
            #formEncoded: formEncoded,
            #token: token,
            #onSendProgress: onSendProgress,
            #onRecieveProgress: onRecieveProgress,
          },
        ),
        returnValue:
            _i4.Future<_i2.FormattedResponse>.value(_FakeFormattedResponse_0(
          this,
          Invocation.method(
            #postHttp,
            [
              route,
              body,
            ],
            {
              #params: params,
              #formdata: formdata,
              #formEncoded: formEncoded,
              #token: token,
              #onSendProgress: onSendProgress,
              #onRecieveProgress: onRecieveProgress,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormattedResponse>);

  @override
  _i4.Future<_i2.FormattedResponse> putHttp(
    String? route,
    dynamic body, {
    Map<String, dynamic>? params,
    bool? formdata = false,
    bool? formEncoded = false,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putHttp,
          [
            route,
            body,
          ],
          {
            #params: params,
            #formdata: formdata,
            #formEncoded: formEncoded,
            #token: token,
          },
        ),
        returnValue:
            _i4.Future<_i2.FormattedResponse>.value(_FakeFormattedResponse_0(
          this,
          Invocation.method(
            #putHttp,
            [
              route,
              body,
            ],
            {
              #params: params,
              #formdata: formdata,
              #formEncoded: formEncoded,
              #token: token,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormattedResponse>);

  @override
  _i4.Future<_i2.FormattedResponse> deleteHttp(
    String? route,
    dynamic body, {
    Map<String, dynamic>? params,
    String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteHttp,
          [
            route,
            body,
          ],
          {
            #params: params,
            #token: token,
          },
        ),
        returnValue:
            _i4.Future<_i2.FormattedResponse>.value(_FakeFormattedResponse_0(
          this,
          Invocation.method(
            #deleteHttp,
            [
              route,
              body,
            ],
            {
              #params: params,
              #token: token,
            },
          ),
        )),
      ) as _i4.Future<_i2.FormattedResponse>);

  @override
  _i4.Future<_i2.FormattedResponse> makeRequest(
          _i4.Future<_i5.Response<dynamic>>? future) =>
      (super.noSuchMethod(
        Invocation.method(
          #makeRequest,
          [future],
        ),
        returnValue:
            _i4.Future<_i2.FormattedResponse>.value(_FakeFormattedResponse_0(
          this,
          Invocation.method(
            #makeRequest,
            [future],
          ),
        )),
      ) as _i4.Future<_i2.FormattedResponse>);

  @override
  dynamic setHeader({
    bool? formdata = false,
    bool? formEncoded = false,
    String? token,
  }) =>
      super.noSuchMethod(Invocation.method(
        #setHeader,
        [],
        {
          #formdata: formdata,
          #formEncoded: formEncoded,
          #token: token,
        },
      ));

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
