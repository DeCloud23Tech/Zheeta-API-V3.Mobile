// Mocks generated by Mockito 5.4.4 from annotations
// in zheeta/test/mock/authentication/domain/repository/user_auth_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:zheeta/app/api/errors/error.dart' as _i5;
import 'package:zheeta/authentication/data/model/login_user_model.dart' as _i8;
import 'package:zheeta/authentication/data/model/register_user_model.dart'
    as _i6;
import 'package:zheeta/authentication/data/request/change_password_request.dart'
    as _i11;
import 'package:zheeta/authentication/data/request/login_oauth_request.dart'
    as _i13;
import 'package:zheeta/authentication/data/request/login_request.dart' as _i9;
import 'package:zheeta/authentication/data/request/refresh_token_request.dart'
    as _i14;
import 'package:zheeta/authentication/data/request/register_staff_request.dart'
    as _i10;
import 'package:zheeta/authentication/data/request/register_user_request.dart'
    as _i7;
import 'package:zheeta/authentication/data/request/reset_password_request.dart'
    as _i12;
import 'package:zheeta/authentication/domain/repository/user_auth_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserAuthRepository extends _i1.Mock
    implements _i3.UserAuthRepository {
  MockUserAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, _i6.RegisterUserModel>>
      registerUserRepo(_i7.RegisterUserRequest? data) => (super.noSuchMethod(
            Invocation.method(
              #registerUserRepo,
              [data],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.ZheetaError, _i6.RegisterUserModel>>.value(
                _FakeEither_0<_i5.ZheetaError, _i6.RegisterUserModel>(
              this,
              Invocation.method(
                #registerUserRepo,
                [data],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.ZheetaError, _i6.RegisterUserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>> loginRepo(
          _i9.LoginRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginRepo,
          [data],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>>.value(
                _FakeEither_0<_i5.ZheetaError, _i8.LoginUserModel>(
          this,
          Invocation.method(
            #loginRepo,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, void>> registerStaffRepo(
          _i10.RegisterStaffRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerStaffRepo,
          [data],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ZheetaError, void>>.value(
            _FakeEither_0<_i5.ZheetaError, void>(
          this,
          Invocation.method(
            #registerStaffRepo,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, void>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, void>> changePasswordRepo(
          _i11.ChangePasswordRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #changePasswordRepo,
          [data],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ZheetaError, void>>.value(
            _FakeEither_0<_i5.ZheetaError, void>(
          this,
          Invocation.method(
            #changePasswordRepo,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, void>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, void>> resetPasswordRepo(
          _i12.ResetPasswordRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPasswordRepo,
          [data],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ZheetaError, void>>.value(
            _FakeEither_0<_i5.ZheetaError, void>(
          this,
          Invocation.method(
            #resetPasswordRepo,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, void>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, void>> loginOAuthRepo(
          _i13.LoginOAuthRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginOAuthRepo,
          [data],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ZheetaError, void>>.value(
            _FakeEither_0<_i5.ZheetaError, void>(
          this,
          Invocation.method(
            #loginOAuthRepo,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, void>>);

  @override
  _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>> refreshToken(
          _i14.RefreshTokenRequest? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #refreshToken,
          [data],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>>.value(
                _FakeEither_0<_i5.ZheetaError, _i8.LoginUserModel>(
          this,
          Invocation.method(
            #refreshToken,
            [data],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ZheetaError, _i8.LoginUserModel>>);
}
